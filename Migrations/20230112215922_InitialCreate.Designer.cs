// <auto-generated />
using System;
using GestionParking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionParking.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    [Migration("20230112215922_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GestionParking.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("badges");

                    b.HasDiscriminator<string>("Type").HasValue("Badge");
                });

            modelBuilder.Entity("GestionParking.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("floors");

                    b.HasDiscriminator<string>("Type").HasValue("Floor");
                });

            modelBuilder.Entity("GestionParking.Models.ParkingTime", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("VehicleId", "FloorId");

                    b.HasIndex("FloorId");

                    b.ToTable("parkingTimes");
                });

            modelBuilder.Entity("GestionParking.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NIC")
                        .IsUnique();

                    b.ToTable("people");

                    b.HasDiscriminator<string>("Type").HasValue("Person");
                });

            modelBuilder.Entity("GestionParking.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("VehicleNumber")
                        .IsUnique();

                    b.ToTable("vehicles");

                    b.HasDiscriminator<string>("VehicleType").HasValue("Vehicle");
                });

            modelBuilder.Entity("GestionParking.Models.Basement", b =>
                {
                    b.HasBaseType("GestionParking.Models.Floor");

                    b.HasDiscriminator().HasValue("Basement");
                });

            modelBuilder.Entity("GestionParking.Models.Car", b =>
                {
                    b.HasBaseType("GestionParking.Models.Vehicle");

                    b.HasDiscriminator().HasValue("Car");
                });

            modelBuilder.Entity("GestionParking.Models.Customer", b =>
                {
                    b.HasBaseType("GestionParking.Models.Person");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("GestionParking.Models.CustomerBadge", b =>
                {
                    b.HasBaseType("GestionParking.Models.Badge");

                    b.HasDiscriminator().HasValue("CustomerBadge");
                });

            modelBuilder.Entity("GestionParking.Models.Director", b =>
                {
                    b.HasBaseType("GestionParking.Models.Person");

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("GestionParking.Models.FirstFloor", b =>
                {
                    b.HasBaseType("GestionParking.Models.Floor");

                    b.HasDiscriminator().HasValue("FirstFloor");
                });

            modelBuilder.Entity("GestionParking.Models.GroundFloor", b =>
                {
                    b.HasBaseType("GestionParking.Models.Floor");

                    b.HasDiscriminator().HasValue("GroundFloor");
                });

            modelBuilder.Entity("GestionParking.Models.MotorCycle", b =>
                {
                    b.HasBaseType("GestionParking.Models.Vehicle");

                    b.HasDiscriminator().HasValue("MotorCycle");
                });

            modelBuilder.Entity("GestionParking.Models.TollCollector", b =>
                {
                    b.HasBaseType("GestionParking.Models.Person");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("TollCollector");
                });

            modelBuilder.Entity("GestionParking.Models.Truck", b =>
                {
                    b.HasBaseType("GestionParking.Models.Vehicle");

                    b.HasDiscriminator().HasValue("Truck");
                });

            modelBuilder.Entity("GestionParking.Models.WhiteBadge", b =>
                {
                    b.HasBaseType("GestionParking.Models.Badge");

                    b.HasDiscriminator().HasValue("WhiteBadge");
                });

            modelBuilder.Entity("GestionParking.Models.Badge", b =>
                {
                    b.HasOne("GestionParking.Models.Customer", "Customer")
                        .WithOne("Badge")
                        .HasForeignKey("GestionParking.Models.Badge", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GestionParking.Models.ParkingTime", b =>
                {
                    b.HasOne("GestionParking.Models.Floor", "Floor")
                        .WithMany("parkingTimes")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionParking.Models.Vehicle", "Vehicle")
                        .WithMany("parkingTimes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GestionParking.Models.Vehicle", b =>
                {
                    b.HasOne("GestionParking.Models.Badge", "Badge")
                        .WithMany("Vehicles")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("GestionParking.Models.Badge", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("GestionParking.Models.Floor", b =>
                {
                    b.Navigation("parkingTimes");
                });

            modelBuilder.Entity("GestionParking.Models.Vehicle", b =>
                {
                    b.Navigation("parkingTimes");
                });

            modelBuilder.Entity("GestionParking.Models.Customer", b =>
                {
                    b.Navigation("Badge")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
